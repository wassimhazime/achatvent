{% extends "themes.twig" %}


{% block headcss %}
    <script src="/public/admin/js/moment.js" ></script>
    <link href="/public/admin/DataTables/datatables.min.css" rel="stylesheet" type="text/css" />
    <link href="/public/admin/selectbootstrap/css/bootstrap-select.min.css" rel="stylesheet" type="text/css"/>
{% endblock %}





{% block headjs %}




{% endblock %}

{% block container %}


    <a href="?ajouter=ajouter" class="btn btn-default">ajouter</a>
    <a href="?s=dm" class="btn btn-default">DEFAULT_MASTER</a>
    <a href="?s=da" class="btn btn-default">DEFAULT_ALL </a>
    <a href="?s=dd" class="btn btn-default">DEFAULT_DEFAULT </a>

    <a href="?s=mm" class="btn btn-default">MASTER_MASTER</a>
    <a href="?s=ma" class="btn btn-default">MASTER_ALL </a>
    <a href="?s=mn" class="btn btn-default">MASTER_NULL</a>

    <a href="?s=am" class="btn btn-default">ALL_MASTER</a>
    <a href="?s=aa" class="btn btn-default">ALL_ALL</a>
    <a href="?s=an" class="btn btn-default">ALL_NULL</a>

    <div class ="cadre">
      <h1>{{title}}  </h1>
      <div class="row">
        <div id="wtable" style="margin: 15px" >
          {{table |raw}}   
        </div>
      </div>


    </div>   
{% endblock %}

{% block footer %}
    <!-- Custom datatables -->
    <script type="text/javascript" src="/public/admin/DataTables/datatables.min.js"></script>

    <script>

        /**
         * Date / time formats often from back from server APIs in a format that you
         * don't wish to display to your end users (ISO8601 for example). This rendering
         * helper can be used to transform any source date / time format into something
         * which can be easily understood by your users when reading the table, and also
         * by DataTables for sorting the table.
         *
         * The [MomentJS library](http://momentjs.com/) is used to accomplish this and
         * you simply need to tell it which format to transfer from, to and specify a
         * locale if required.
         *
         * This function should be used with the `dt-init columns.render` configuration
         * option of DataTables.
         *
         * It accepts one, two or three parameters:
         *
         *     $.fn.dataTable.render.moment( to );
         *     $.fn.dataTable.render.moment( from, to );
         *     $.fn.dataTable.render.moment( from, to, locale );
         *
         * Where:
         *
         * * `to` - the format that will be displayed to the end user
         * * `from` - the format that is supplied in the data (the default is ISO8601 -
         *   `YYYY-MM-DD`)
         * * `locale` - the locale which MomentJS should use - the default is `en`
         *   (English).
         *
         *  @name datetime
         *  @summary Convert date / time source data into one suitable for display
         *  @author [Allan Jardine](http://datatables.net)
         *  @requires DataTables 1.10+
         *
         *  @example
         *    // Convert ISO8601 dates into a simple human readable format
         *    $('#example').DataTable( {
         *      columnDefs: [ {
         *        targets: 1,
         *        render: $.fn.dataTable.render.moment( 'Do MMM YYYYY' )
         *      } ]
         *    } );
         *
         *  @example
         *    // Specify a source format - in this case a unix timestamp
         *    $('#example').DataTable( {
         *      columnDefs: [ {
         *        targets: 2,
         *        render: $.fn.dataTable.render.moment( 'X', 'Do MMM YY' )
         *      } ]
         *    } );
         *
         *  @example
         *    // Specify a source format and locale
         *    $('#example').DataTable( {
         *      columnDefs: [ {
         *        targets: 2,
         *        render: $.fn.dataTable.render.moment( 'YYYY/MM/DD', 'Do MMM YY', 'fr' )
         *      } ]
         *    } );
         */


// UMD
        (function (factory) {
          "use strict";

          if (typeof define === 'function' && define.amd) {
            // AMD
            define(['jquery'], function ($) {
              return factory($, window, document);
            });
          } else if (typeof exports === 'object') {
            // CommonJS
            module.exports = function (root, $) {
              if (!root) {
                root = window;
              }

              if (!$) {
                $ = typeof window !== 'undefined' ?
                        require('jquery') :
                        require('jquery')(root);
              }

              return factory($, root, root.document);
            };
          } else {
            // Browser
            factory(jQuery, window, document);
          }
        }
        (function ($, window, document) {


          $.fn.dataTable.render.moment = function (from, to, locale) {
            // Argument shifting
            if (arguments.length === 1) {
              locale = 'en';
              to = from;
              from = 'YYYY-MM-DD';
            } else if (arguments.length === 2) {
              locale = 'en';
            }

            return function (d, type, row) {
              var m = window.moment(d, from, locale, true);

              // Order and type get a number value from Moment, everything else
              // sees the rendered value
              return m.format(type === 'sort' || type === 'type' ? 'x' : to);
            };
          };


        }));
    </script>
    <script>
        $(document).ready(function () {
          var table = $('#example').DataTable(
                  {columnDefs: [{
                        targets: 2, /// order de champ
                        render: $.fn.dataTable.render.moment('YYYY-MM-DD', 'DD/MM/YYYY', 'fr')
                      }],

                    lengthChange: false,
                    buttons: ['excel', 'pdf', 'colvis'],
                    language: {
                      processing: "Traitement en cours...",
                      search: "Rechercher&nbsp;:",
                      lengthMenu: "Afficher _MENU_ &eacute;l&eacute;ments",
                      info: "Affichage de l'&eacute;lement _START_ &agrave; _END_ sur _TOTAL_ &eacute;l&eacute;ments",
                      infoEmpty: "Affichage de l'&eacute;lement 0 &agrave; 0 sur 0 &eacute;l&eacute;ments",
                      infoFiltered: "(filtr&eacute; de _MAX_ &eacute;l&eacute;ments au total)",
                      infoPostFix: "",
                      loadingRecords: "Chargement en cours...",
                      zeroRecords: "Aucun &eacute;l&eacute;ment &agrave; afficher",
                      emptyTable: "Aucune donnée disponible dans le tableau",
                      paginate: {
                        first: "Premier",
                        previous: "Pr&eacute;c&eacute;dent",
                        next: "Suivant",
                        last: "Dernier"
                      },
                      aria: {
                        sortAscending: ": activer pour trier la colonne par ordre croissant",
                        sortDescending: ": activer pour trier la colonne par ordre décroissant"
                      }
                      , buttons: {
                        colvis: "select les champs"
                      }
                    }
                  }

          );

          table.buttons().container().appendTo('#example_wrapper .col-sm-6:eq(0)');

        });
    </script>
    <!-- end dataTables -->   
{% endblock %}